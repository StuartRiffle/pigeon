


              H   G   F   E   D   C   B   A
             ___ ___ ___ ___ ___ ___ ___ ___
         1|    .   .   .   .   .   .   .   .
         2|  -28  -4 -10 -32 -38 -42 -23 -27     
 PAWN    3|  -23  -5 -18 -29 -36 -39 -21 -30           
         4|  -25  -8 -16 -17 -18 -30 -17 -20       
(delta   5|  -11   0 -13  -8 -17 -30  -6  -4             
 from    6|   16  33  23  22  29  33  38  32	           
 100)    7|   35  56  47  59  65  84  92  76	          
         8|    .   .   .   .   .   .   .   .       
                                     		         
         1|  -74 -16 -40 -36 -40 -52 -31 -79       
         2|  -31 -31 -15 -15 -15 -23 -34 -60       
KNIGHT   3|  -25  -4  -2  11   7  -6 -18 -31             
         4|   -3  23  21  19   9  15   5 -18       
(delta   5|   29  26  48  29  43  30  13   6                        
 from    6|   32  39  58  50  48  32  26   2	           
 250)    7|   15  13  40  49  33  31   3  -7	          
         8|  -83  13  13  27  12   2   0-105       
                                     		         
         1|  -33 -21 -16 -26 -22 -19 -14 -22       
         2|  -16   0  -4  -7 -15   0 -10  -7       
BISHOP   3|   -5  -2  -1   6   2   4   7  -5             
         4|   -5   5   0  16  20  10   8   3       
(delta   5|    9  -6  23  23  27  18   0  -2             
 from    6|   23  27  29  27  28  18  20   6	           
 275)    7|    4   4  18  12  11  14  13   2	          
         8|  -11   2  -5   5   3   1   0  -5                  
                                     		         
         1|  -43 -22 -32 -25 -21 -24 -30 -42       
         2|  -37 -26 -30 -30 -29 -28 -33 -41       
 ROOK    3|  -21  -8 -20 -23 -24 -21 -17 -26           
         4|   -8   3   0  -4  -2  -2  -1  -8       
(delta   5|   13  18  21  16  17  16  15  14             
 from    6|   25  32  34  31  30  30  28  23	                      
 435)    7|   28  33  35  34  36  35  29  27	          
         8|   29  23  24  26  28  25  24  21       
                                     		                    
         1|  -55 -83 -80 -51 -41 -62 -65 -44                             
         2|  -52 -60 -51 -38 -38 -46 -45 -45       
 QUEEN   3|  -16 -14 -26 -30 -38 -32 -45 -38            
         4|    1   3  -5 -10 -21 -22 -24 -41       
(delta   5|   30  42  29  22  15   1 -17 -29             
 from    6|   58  96  76  50  28  12   6 -19	                      
 850)    7|   86  60  61  43  32  24  -1 -13	          
         8|   73  55  52  46  33  22  14   3       
             
         1|  -22 -10 -38 -24 -39 -12   4  -1                
         2|  -20 -15 -21 -22 -20 -20 -13  -4     
 KING    3|  -26 -14 -12 -10 -12 -11  -9 -19           
         4|  -19  -2  -0  -2  -2  -0   1 -13     
         5|  -10   2   2  -2  -3   7   8  -5     
         6|   -6  27  13   2   6  14  23   1     
         7|   14  38  24  16  16  21  28   3     
         8|   -3  34  23  15  12   8  19  -5     







            H   G   F   E   D   C   B   A        H   G   F   E   D   C   B   A
                 --- --- --- --- --- --- --- ------ --- --- --- --- --- --- ---
       1|    .   .   .   .   .   .   .   .        .   .   .   .   .   .   .   .
  PAWN 2|   72  96  90  68  62  58  77  73      -28  -4 -10 -32 -38 -42 -23 -27
       3|   77  95  82  71  64  61  79  70      -23  -5 -18 -29 -36 -39 -21 -30 
       4|   75  92  84  83  82  70  83  80      -25  -8 -16 -17 -18 -30 -17 -20 
       5|   89 100  87  92  83  70  94  96      -11   0 -13  -8 -17 -30  -6  -4 (delta
       6|  116 133 123 122 129 133 138 132       16  33  23  22  29  33  38  32	 from 
       7|  135 156 147 159 165 184 192 176       35  56  47  59  65  84  92  76	 100)
       8|    .   .   .   .   .   .   .   .        .   .   .   .   .   .   .   .
                                                                        
       1|  176 234 210 214 210 198 219 171      -74 -16 -40 -36 -40 -52 -31 -79
KNIGHT 2|  219 219 235 235 235 227 216 190      -31 -31 -15 -15 -15 -23 -34 -60
       3|  225 246 248 261 257 244 232 219      -25  -4  -2  11   7  -6 -18 -31 
       4|  247 273 271 269 259 265 255 232       -3  23  21  19   9  15   5 -18 
       5|  279 276 298 279 293 280 263 256       29  26  48  29  43  30  13   6 (delta
       6|  282 289 308 300 298 282 276 252       32  39  58  50  48  32  26   2	 from 
       7|  265 263 290 299 283 281 253 243       15  13  40  49  33  31   3  -7	 250)
       8|  167 263 263 277 262 252 250 145      -83  13  13  27  12   2   0-105
                                                                        
       1|  242 254 259 249 253 256 261 253      -33 -21 -16 -26 -22 -19 -14 -22
BISHOP 2|  259 275 271 268 260 275 265 268      -16   0  -4  -7 -15   0 -10  -7
       3|  270 273 274 281 277 279 282 270       -5  -2  -1   6   2   4   7  -5 
       4|  270 280 275 291 295 285 283 278       -5   5   0  16  20  10   8   3 
       5|  284 269 298 298 302 293 275 273        9  -6  23  23  27  18   0  -2 (delta
       6|  298 302 304 302 303 293 295 281       23  27  29  27  28  18  20   6	 from 
       7|  279 279 293 287 286 289 288 277        4   4  18  12  11  14  13   2	 275)
       8|  264 277 270 280 278 276 275 270      -11   2  -5   5   3   1   0  -5
                                                                        
       1|  392 413 403 410 414 411 405 393      -43 -22 -32 -25 -21 -24 -30 -42
  ROOK 2|  398 409 405 405 406 407 402 394      -37 -26 -30 -30 -29 -28 -33 -41
       3|  414 427 415 412 411 414 418 409      -21  -8 -20 -23 -24 -21 -17 -26 
       4|  427 438 435 431 433 433 434 427       -8   3   0  -4  -2  -2  -1  -8 
       5|  448 453 456 451 452 451 450 449       13  18  21  16  17  16  15  14 (delta
       6|  460 467 469 466 465 465 463 458       25  32  34  31  30  30  28  23	 from 
       7|  463 468 470 469 471 470 464 462       28  33  35  34  36  35  29  27	 435)
       8|  464 458 459 461 463 460 459 456       29  23  24  26  28  25  24  21
                                                                        
       1|  795 767 770 799 809 788 785 806      -55 -83 -80 -51 -41 -62 -65 -44
 QUEEN 2|  798 790 799 812 812 804 805 805      -52 -60 -51 -38 -38 -46 -45 -45 
       3|  834 836 824 820 812 818 805 812      -16 -14 -26 -30 -38 -32 -45 -38 
       4|  851 853 845 840 829 828 826 809        1   3  -5 -10 -21 -22 -24 -41 
       5|  880 892 879 872 865 851 833 821       30  42  29  22  15   1 -17 -29	(delta
       6|  908 946 926 900 878 862 856 831       58  96  76  50  28  12   6 -19	 from 
       7|  936 910 911 893 882 874 849 837       86  60  61  43  32  24  -1 -13	 850)
       8|  923 905 902 896 883 872 864 853       73  55  52  46  33  22  14   3
      
       1|  -22 -10 -38 -24 -39 -12   4  -1
  KING 2|  -20 -15 -21 -22 -20 -20 -13  -4
       3|  -26 -14 -12 -10 -12 -11  -9 -19
       4|  -19  -2  -0  -2  -2  -0   1 -13
       5|  -10   2   2  -2  -3   7   8  -5
       6|   -6  27  13   2   6  14  23   1
       7|   14  38  24  16  16  21  28   3
       8|   -3  34  23  15  12   8  19  -5

	
  .   .   .   .   .   .   .   .
-28  -4 -10 -32 -38 -42 -23 -27
-23  -5 -18 -29 -36 -39 -21 -30
-25  -8 -16 -17 -18 -30 -17 -20
-11   0 -13  -8 -17 -30  -6  -4
 16  33  23  22  29  33  38  32
 35  56  47  59  65  84  92  76
  .   .   .   .   .   .   .   .
                            
-74 -16 -40 -36 -40 -52 -31 -79
-31 -31 -15 -15 -15 -23 -34 -60
-25  -4  -2  11   7  -6 -18 -31
 -3  23  21  19   9  15  5  -18
 29  26  48  29  43  30  13   6
 32  39  58  50  48  32  26   2
 15  13  40  49  33  31  3   -7
-83  13  13  27  12  2   0 -105
                            
-33 -21 -16 -26 -22 -19 -14 -22
-16   0  -4  -7 -15   0 -10  -7
 -5  -2  -1   6   2   4   7  -5
 -5   5   0  16  20  10   8   3
  9  -6  23  23  27  18   0  -2
 23  27  29  27  28  18  20   6
  4   4  18  12  11  14  13   2
-11   2  -5   5   3   1   0  -5
                            
-43 -22 -32 -25 -21 -24 -30 -42
-37 -26 -30 -30 -29 -28 -33 -41
-21  -8 -20 -23 -24 -21 -17 -26
 -8   3   0  -4  -2  -2  -1  -8
 13  18  21  16  17  16  15  14
 25  32  34  31  30  30  28  23
 28  33  35  34  36  35  29  27
 29  23  24  26  28  25  24  21
                            
-55 -83 -80 -51 -41 -62 -65 -44
-52 -60 -51 -38 -38 -46 -45 -45
-16 -14 -26 -30 -38 -32 -45 -38
  1   3  -5 -10 -21 -22 -24 -41
 30  42  29  22  15   1 -17 -29
 58  96  76  50  28  12   6 -19
 86  60  61  43  32  24  -1 -13
 73  55  52  46  33  22  14   3









            if( LANES == 1 )
            {
                f->childSpec[0] = this->ChooseNextMove( f );
                f->childPos[0] = f->pos;
                f->childPos[0].Step( f->childSpec[0], whiteMat, blackMat );
                f->pos.CalcMoveMap( &f->childMoveMap[0] );
                f->childScore[0] = mEvaluator->Evaluate< POPCNT, SIMD >( f->pos, *f->childMoveMap[0], mWeights );

                f->simdIdx = 0;
            }
            else
            {


go depth 5
info depth 1 seldepth 1 score cp 74 hashfull 0 nodes 21 time 7 nps 21000 pv b1c3

info string DEBUG: simdnodes 20  >>>> 1: 74
info depth 2 seldepth 2 score cp 0 hashfull 0 nodes 100 time 24 nps 50000 pv g1f
3 b8c6
info string DEBUG: simdnodes 98  >>>> 2: 0
info depth 3 seldepth 3 score cp 74 hashfull 0 nodes 732 time 57 nps 43058 pv g1
f3 b8c6 b1c3
info string DEBUG: simdnodes 729  >>>> 3: 74
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 2363 time 129 nps 42963 pv g
1f3 b8c6 b1c3 g8f6
info string DEBUG: simdnodes 2359  >>>> 4: 0
info depth 5 seldepth 13 score cp 57 hashfull 0 nodes 17333 time 388 nps 70746 p
v g1f3 b8c6 b1c3 g8f6 e2e3
info string DEBUG: simdnodes 17328  >>>> 5: 57





    template< int POPCNT, typename SIMD >
    EvalTerm NegaMax( const Position& pos, const MoveMap& moveMap, EvalTerm score, int ply, int depth, EvalTerm alpha, EvalTerm beta, MoveList* pv_new, bool onPvPrev )
    {
        const int LANES = SimdWidth< SIMD >::LANES;

        mMetrics.mNodesTotal++;
        mMetrics.mNodesAtPly[ply]++;

        if( depth < 1 )
        {
            alpha = Max( alpha, score );
            
            if( alpha >= beta )
                return( beta );
        }

        if( mExitSearch )
            return( EVAL_SEARCH_ABORTED );

        if( POPCNT )
            mHashTable.Prefetch( pos.mHash );

        bool inCheck = (moveMap.IsInCheck() != 0);

        MoveList moves;
        moves.UnpackMoveMap( pos, moveMap );

        if( moves.mCount == 0 )
            return( inCheck? EVAL_CHECKMATE : EVAL_STALEMATE );

        if( depth < 1 )
        {
            if( !inCheck )
                moves.DiscardMovesBelow( CAPTURE_LOSING );

            if( moves.mCount == 0 )
                return( score );
        }

        if( depth > 0 )
        {
            TableEntry tt;

            mHashTable.Load( pos.mHash, tt );
            mMetrics.mHashLookupsAtPly[ply]++;

            u32 verify = (u32) (pos.mHash >> 40);
            if( tt.mHashVerify == verify )
            {
                mMetrics.mHashHitsAtPly[ply]++;

                bool        samePlayer          = (pos.mWhiteToMove != 0) == tt.mWhiteMove;
                bool        failedHighBefore    = samePlayer? tt.mFailHigh : tt.mFailLow;
                EvalTerm    lowerBoundBefore    = samePlayer? tt.mScore    : -tt.mScore;
                int         depthBefore         = tt.mDepth;

                if( failedHighBefore && (lowerBoundBefore >= beta) && (depthBefore >= depth) )
                    return( beta );

                moves.MarkSpecialMoves( tt.mBestSrc, tt.mBestDest, FLAG_TT_BEST_MOVE );
            }
        }

        if( onPvPrev && (mStorePv->mCount > ply) )
        {
            MoveSpec& pvMove = mStorePv->mMove[ply];
            moves.MarkSpecialMoves( pvMove.mSrc, pvMove.mDest, FLAG_PRINCIPAL_VARIATION );
        }

        int         movesTried  = 0;
        int         simdIdx     = LANES - 1;
        bool        nullSearch  = false;
        EvalTerm    bestScore   = alpha;
        MoveSpec    bestMove;

        MoveSpec PIGEON_ALIGN_SIMD childSpec[LANES];
        Position PIGEON_ALIGN_SIMD childPos[LANES];
        MoveMap  PIGEON_ALIGN_SIMD childMoveMap[LANES];
        EvalTerm PIGEON_ALIGN_SIMD childScore[LANES];

        while( (movesTried < moves.mCount) && (bestScore < beta) )
        {
            simdIdx++;
            if( simdIdx >= LANES )
            {
                MoveSpecT< SIMD >   simdSpec;
                PositionT< SIMD >   simdPos;
                MoveMapT< SIMD >    simdMoveMap;
                SIMD                simdScore;

                simdSpec.mSrc  = 0;
                simdSpec.mDest = 0;
                simdSpec.mType = 0;

                for( int idxLane = 0; idxLane < LANES; idxLane++ )
                {
                    if( moves.mTried >= moves.mCount )
                        break;

                    int idxMove = this->ChooseNextMove( moves, (int) pos.mWhiteToMove );
                    childSpec[idxLane] = moves.mMove[idxMove];

                    SimdInsert( simdSpec.mSrc,  childSpec[idxLane].mSrc,  idxLane );
                    SimdInsert( simdSpec.mDest, childSpec[idxLane].mDest, idxLane );
                    SimdInsert( simdSpec.mType, childSpec[idxLane].mType, idxLane );

                    mMetrics.mNodesTotalSimd++;
                }

                const MaterialTable* whiteMat = NULL;
                const MaterialTable* blackMat = NULL;

                if( 0 ) // FIXME
                {
                    whiteMat = &mMaterialTable[pos.mWhiteToMove];
                    blackMat = &mMaterialTable[pos.mWhiteToMove ^ 1];
                }

                simdPos.Broadcast( pos );
                simdPos.Step( simdSpec, whiteMat, blackMat );
                simdPos.CalcMoveMap( &simdMoveMap );
                simdScore = mEvaluator.Evaluate< POPCNT, SIMD >( simdPos, simdMoveMap, mRootWeights );

                Unswizzle< SIMD >( &simdPos,     childPos );
                Unswizzle< SIMD >( &simdMoveMap, childMoveMap );

				u64 PIGEON_ALIGN_SIMD unpackScore[LANES];
				*((SIMD*) unpackScore) = simdScore;

				for( int idxLane = 0; idxLane < LANES; idxLane++ )
					childScore[idxLane] = (EvalTerm) unpackScore[idxLane];

				simdIdx = 0;
            }

            bool allowMove = true;

            if( ply == 0 )
            {
                // TODO: make sure that this does not eliminate all valid moves! 

                bool repeatedPosition = (mPositionReps[childPos[simdIdx].mHash] > 1);
                bool notReadyToDraw   = (score < ALLOW_REP_SCORE);

                if( repeatedPosition && notReadyToDraw && !inCheck )
                {
                    allowMove = false;

                    if( mDebugMode )
                    {
                        printf( "info string preventing " );
                        FEN::PrintMoveSpec( childSpec[simdIdx] );
                        printf( " to avoid draw by repetition\n" );
                    }
                }
            }

            if( 1 )//allowMove )
            {
                MoveList pv_child;
                EvalTerm subScore;
            
                bool fullSearch = true;

                if( 0 )//nullSearch )
                {
                    subScore = -this->NegaMax< POPCNT, SIMD >( 
                        childPos[simdIdx], childMoveMap[simdIdx], childScore[simdIdx], ply + 1, depth - 1, -(bestScore + 1), -bestScore, 
                        &pv_child, (childSpec[simdIdx].mFlags & FLAG_PRINCIPAL_VARIATION)? true : false );
                
                    fullSearch = (subScore > bestScore) && (subScore < beta);
                }

                if( fullSearch )
                {
                    subScore = -this->NegaMax< POPCNT, SIMD >( 
                        childPos[simdIdx], childMoveMap[simdIdx], childScore[simdIdx], ply + 1, depth - 1, -beta, -bestScore, 
                        &pv_child, (childSpec[simdIdx].mFlags & FLAG_PRINCIPAL_VARIATION)? true : false );
                }

        //FEN::PrintMoveSpec( childSpec[simdIdx] );
        //printf( " %d\n", subScore );

                if( subScore > bestScore )
                {
                    bestScore   = subScore;
                    bestMove    = childSpec[simdIdx];
                    nullSearch  = true;

                    if( subScore < beta )
                    {
                        pv_new->mCount = 1;
                        pv_new->mMove[0] = bestMove;
                        pv_new->Append( pv_child );
                    }

                    if( depth > 1 )
                    {
                        int sidePlies       = ply >> 1;
                        int maxHistoryPlies = sizeof( mHistoryTable[0][0][0] ) * 8 - 1;
                        int historyBit      = maxHistoryPlies - sidePlies;

                        if( historyBit >= 0 )
                            mHistoryTable[pos.mWhiteToMove][bestMove.mDest][bestMove.mSrc] |= (1 << historyBit);
                    }
                }
            }

            if( (ply < METRICS_DEPTH) && (movesTried < METRICS_MOVES) )
                mMetrics.mMovesTriedByPly[ply][movesTried]++;

            movesTried++;

            //if( depth < -1 )
            //    break;
        }

        if( mExitSearch )
            return( EVAL_SEARCH_ABORTED );

        bool        failedHigh  = (bestScore >= beta);
        bool        failedLow   = (bestScore == alpha);
        EvalTerm    result      = failedHigh? beta : (failedLow? alpha : bestScore);

        if( depth > 0 )
        {
            TableEntry tt;

            tt.mHashVerify  = pos.mHash >> 40;
            tt.mDepth       = depth;
            tt.mScore       = result;
            tt.mBestSrc     = bestMove.mSrc;
            tt.mBestDest    = bestMove.mDest;
            tt.mFailLow     = failedLow;
            tt.mFailHigh    = failedHigh;
            tt.mWhiteMove   = pos.mWhiteToMove? true : false;

            mHashTable.Store( pos.mHash, tt );
        }

        return( result );
    }







CUDA stride 0xa8



info string CUDA 0: GeForce GTX 660 (CC 3.0, 960 cores, 1084 MHz, 2048 MB)
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 13 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 20 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 1942 time 30 nps 971000 pv g1f3 g7g6 g1f3 g8f6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 16188 time 53 nps 1245230 pv g1f3 g8f6 g1f3 g7g6 b1c3
4096 jobs,  33263 nodes, GPU time  185.1ms, CPU latency  142.5ms, most steps  588, nps  179k
4096 jobs,  21495 nodes, GPU time   70.6ms, CPU latency  213.3ms, most steps  210, nps  304k
4096 jobs,  16632 nodes, GPU time   63.6ms, CPU latency  278.2ms, most steps  221, nps  261k
2027 jobs,   8996 nodes, GPU time   35.0ms, CPU latency  314.1ms, most steps  372, nps  257k
info depth 6 seldepth 22 score cp 32512 hashfull 0 nodes 103916 time 446 nps 271321 pv g1f3 g8f6 b1c3 e7e6 h1g1 b8c6
4096 jobs,  93009 nodes, GPU time  255.5ms, CPU latency  276.8ms, most steps 1373, nps  364k
4096 jobs,  87954 nodes, GPU time  121.8ms, CPU latency  352.7ms, most steps  728, nps  722k
4096 jobs,  73927 nodes, GPU time  245.9ms, CPU latency  565.7ms, most steps  813, nps  300k
4096 jobs,  60433 nodes, GPU time  282.7ms, CPU latency  842.4ms, most steps 1021, nps  213k
4096 jobs,  61349 nodes, GPU time  206.0ms, CPU latency 1039.2ms, most steps  685, nps  297k
4096 jobs, 104031 nodes, GPU time  158.9ms, CPU latency 1158.2ms, most steps  538, nps  654k
4096 jobs,  61234 nodes, GPU time  228.0ms, CPU latency 1374.4ms, most steps 1710, nps  268k
4096 jobs,  44402 nodes, GPU time   92.8ms, CPU latency 1458.0ms, most steps  276, nps  478k
4096 jobs,  89901 nodes, GPU time   72.8ms, CPU latency 1371.0ms, most steps  308, nps 1235k
info depth 7 seldepth 26 score cp 98 hashfull 0 nodes 1095272 time 2202 nps 627663 pv g1f3 g8f6 a2a3 g7g6 c1a3 b8c6 d3e4
4096 jobs,  89404 nodes, GPU time   84.7ms, CPU latency   95.5ms, most steps  366, nps 1055k
4096 jobs,  61922 nodes, GPU time   90.0ms, CPU latency  174.2ms, most steps  243, nps  688k
4096 jobs,  61072 nodes, GPU time  152.1ms, CPU latency  316.0ms, most steps  827, nps  401k
4096 jobs,  84326 nodes, GPU time  253.1ms, CPU latency  552.8ms, most steps 2006, nps  333k
4096 jobs,  71650 nodes, GPU time  185.7ms, CPU latency  721.4ms, most steps  760, nps  385k
4096 jobs,  61006 nodes, GPU time  143.0ms, CPU latency  853.7ms, most steps  393, nps  426k
4096 jobs,  53655 nodes, GPU time  161.7ms, CPU latency  995.2ms, most steps  545, nps  331k
4096 jobs,  47130 nodes, GPU time  131.0ms, CPU latency 1113.7ms, most steps  496, nps  359k
4096 jobs,  50532 nodes, GPU time  181.9ms, CPU latency 1284.8ms, most steps  517, nps  277k
4096 jobs,  91523 nodes, GPU time  201.8ms, CPU latency 1395.8ms, most steps  700, nps  453k
4096 jobs,  54517 nodes, GPU time   94.8ms, CPU latency 1347.4ms, most steps  354, nps  574k
4096 jobs,  47922 nodes, GPU time  144.3ms, CPU latency 1234.4ms, most steps 1214, nps  332k
4096 jobs,  53345 nodes, GPU time  120.0ms, CPU latency 1171.7ms, most steps  365, nps  444k
4096 jobs,  53620 nodes, GPU time   89.5ms, CPU latency 1113.8ms, most steps  332, nps  599k


cuda=true
simd=false
go depth 11
info string CUDA 0: GeForce GTX 660 (CC 3.0, 960 cores, 1084 MHz, 2048 MB)
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 12 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 20 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 1942 time 30 nps 971000 pv g1f3 g7g6 g1f3 g8f6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 16188 time 54 nps 1156285 pv g1f3 g8f6 g1f3 g7g6 b1c3
info depth 6 seldepth 22 score cp 32512 hashfull 0 nodes 110504 time 758 nps 159457 pv g1f3 g8f6 b1c3 e7e6 h1g1 b8c6
info depth 7 seldepth 27 score cp 110 hashfull 0 nodes 1547172 time 1877 nps 1396364 pv b1c3 g8f6 e2e3 a7a6 g2g4 f6e4 c3e4
info depth 8 seldepth 31 score cp -40 hashfull 0 nodes 6802837 time 6157 nps 1594290 pv e2e3 g8f6 g1f3 g7g6 f2f3 b8c6 h1h2 e7d6
info depth 9 seldepth 37 score cp 56 hashfull 15 nodes 20627148 time 18325 nps 1697009 pv e2e3 g8f6 b1c3 g7g6 b4b5 b8c6 h1h2 f8h6 b1d2
info depth 10 seldepth 40 score cp -23 hashfull 39 nodes 54626417 time 54217 nps 1522602 pv b1c3 g8f6 d2d4 g7g6 b1c3 b8c6 e1f2 f6d5 g4e4 d5c3
info depth 11 seldepth 45 score cp 47 hashfull 195 nodes 281641302 time 230110 nps 1601344 pv b1c3 g7g6 d2d4 b8c6 d4d5 d7d5 d2d4 g8f6 a2a5 c6a5 d1d4
bestmove b1c3

cuda=false
simd=false
go depth 11
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 12 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 20 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 1942 time 30 nps 1942000 pv g1f3 g7g6 g1f3 g8f6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 16188 time 54 nps 1245230 pv g1f3 g8f6 g1f3 g7g6 b1c3
info depth 6 seldepth 16 score cp 0 hashfull 0 nodes 45095 time 111 nps 980326 pv g1f3 g7g6 e4e5 g8f6 d1g4 h6g5
info depth 7 seldepth 21 score cp 56 hashfull 0 nodes 254091 time 366 nps 1049962 pv b1c3 g7g6 g1f3 h7h6 f3g5 h6g5 g5f6
info depth 8 seldepth 22 score cp 0 hashfull 0 nodes 778736 time 1200 nps 949678 pv b1c3 g7g6 g1f3 g8f6 g4g5 g6h5 d1d4 b8c6
info depth 9 seldepth 25 score cp 56 hashfull 0 nodes 3066048 time 4028 nps 1090344 pv b1c3 g7g6 g1f3 g8f6 e4e5 g6h5 e5f6 b8c6 c3e4
info depth 10 seldepth 29 score cp 0 hashfull 7 nodes 12223323 time 16646 nps 970028 pv b1c3 g7g6 g1f3 g8f6 e4e5 b8c6 d1d4 b8c6 g2h3 d7d6
info depth 11 seldepth 31 score cp 35 hashfull 132 nodes 114938514 time 114041 nps 1180345 pv b1c3 g7g6 e2e3 g8f6 h1h3 b8c6 g5f6 d7d6 h3f2 f6g4 h1h2
bestmove b1c3

cuda=false
simd=true
go depth 11
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 5 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 13 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 658 time 21 nps 658000 pv g1f3 g8f6 b1c3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 2169 time 32 nps 1084500 pv g1f3 g7g6 g1f3 h7h6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 16939 time 53 nps 1539909 pv g1f3 g8f6 b1c3 g7g6 g1f3
info depth 6 seldepth 16 score cp 20 hashfull 0 nodes 65261 time 123 nps 1106118 pv a2a4 g7g6 a4a5 h7h6 a4a5 h6g5
info depth 7 seldepth 19 score cp 41 hashfull 0 nodes 474489 time 525 nps 1219766 pv e2e3 g7g6 e4e5 b8c6 b1c3 g8f6 d1d4
info depth 8 seldepth 24 score cp 20 hashfull 0 nodes 1624019 time 2000 nps 1111580 pv e2e3 g7g6 a4a5 g8f6 a4a5 b8c6 d1d4 c6d4
info depth 9 seldepth 30 score cp 36 hashfull 0 nodes 7147941 time 7361 nps 1337313 pv e2e3 g7g6 e2e3 g8f6 e4e5 b8c6 e5f6 h7h6 h3g4
info depth 10 seldepth 31 score cp 10 hashfull 15 nodes 27145346 time 30234 nps 1187668 pv e2e3 g7g6 c2c3 g8f6 a4a5 f6g4 a4a5 e4d2 h2h4 d2b1
info depth 11 seldepth 31 score cp 39 hashfull 203 nodes 177580154 time 161179 nps 1356319 pv g1f3 g7g6 g1f3 h7h6 c2c3 h8h7 d4d5 b8c6 c1d2 g8f6 c1d2
bestmove g1f3




cuda=false
simd=false
go depth 10
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 12 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 21 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 1942 time 31 nps 971000 pv g1f3 g7g6 g1f3 g8f6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 16188 time 54 nps 1245230 pv g1f3 g8f6 g1f3 g7g6 b1c3
info depth 6 seldepth 16 score cp 0 hashfull 0 nodes 45095 time 111 nps 980326 pv g1f3 g7g6 e4e5 g8f6 d1g4 h6g5
info depth 7 seldepth 21 score cp 56 hashfull 0 nodes 254091 time 364 nps 1049962 pv b1c3 g7g6 g1f3 h7h6 f3g5 h6g5 g5f6
info depth 8 seldepth 22 score cp 0 hashfull 0 nodes 778736 time 1194 nps 950837 pv b1c3 g7g6 g1f3 g8f6 g4g5 g6h5 d1d4 b8c6
info depth 9 seldepth 25 score cp 56 hashfull 0 nodes 3066048 time 4027 nps 1086865 pv b1c3 g7g6 g1f3 g8f6 e4e5 g6h5 e5f6 b8c6 c3e4
info depth 10 seldepth 29 score cp 0 hashfull 7 nodes 12223323 time 15629 nps 1054643 pv b1c3 g7g6 g1f3 g8f6 e4e5 b8c6 d1d4 b8c6 g2h3 d7d6
bestmove b1c3

        Position            PIGEON_ALIGN_SIMD checkPos[LANES];
        MoveMap             PIGEON_ALIGN_SIMD checkMoveMap[LANES];
        u64                 PIGEON_ALIGN_SIMD checkScore[LANES];

        int lanesUsed = 0;

            checkPos[idxLane] = *f->pos;
            checkPos[idxLane].Step( f->childSpec[idxLane] );
            checkPos[idxLane].CalcMoveMap( &checkMoveMap[idxLane] );
            checkScore[idxLane] = mEvaluator->Evaluate< POPCNT, u64 >( checkPos[idxLane], checkMoveMap[idxLane], mWeights );
            lanesUsed++;

        for( int idxLane = 0; idxLane < lanesUsed; idxLane++ )
        {
            assert( !memcmp( &checkPos[idxLane], &f->childPos[idxLane], sizeof( Position ) ) );
            assert( !memcmp( &checkMoveMap[idxLane], &f->childMoveMap[idxLane], sizeof( MoveMap ) ) );

            if( ((EvalTerm) checkScore[idxLane]) != ((EvalTerm) unpackScore[idxLane]) )
            {
                u64  scalarEval[EVAL_TERMS] = { 0 };
                SIMD simdEval[EVAL_TERMS] = { 0 };

                mEvaluator->CalcEvalTerms< POPCNT, u64 >( f->childPos[idxLane], f->childMoveMap[idxLane], scalarEval );
                mEvaluator->CalcEvalTerms< POPCNT, SIMD >( simdPos, simdMoveMap, simdEval );

                for( int i = 0; i < EVAL_TERMS; i++ )
                {
                    EvalTerm val0 = (EvalTerm) scalarEval[i];
                    EvalTerm val1 = (EvalTerm) ((u64*) &simdEval[i])[idxLane];

                    if( val0 != val1 )
                        printf( "%2d: %08x %08x !!!!! %d %08x %08x\n", i, val0, val1, sizeof( SIMD ), (scalarEval[EVAL_KNIGHTS_DEVEL] ) & 0xFFFFFFFF, (EvalTerm) scalarEval[EVAL_BISHOPS_DEVEL]  );
                }

                u64 scalarScoreCheck = mEvaluator->ApplyWeights( scalarEval, mWeights );
                SIMD simdScoreCheck =  mEvaluator->ApplyWeights( simdEval, mWeights );


                //printf( "%08x %08x\n", (EvalTerm) checkScore[idxLane], (EvalTerm) unpackScore[idxLane] );
                printf( "%08x %08x %08x %08x\n", ((EvalTerm) checkScore[idxLane]), ((EvalTerm) unpackScore[idxLane]), (EvalTerm) scalarScoreCheck, (EvalTerm) ((u64*) &simdScoreCheck)[idxLane] );

            }
        }


After fixing score

simd=false
go depth 10
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 12 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 19 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 2138 time 29 nps 1069000 pv g1f3 g7g6 g1f3 g8f6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 16079 time 51 nps 1339916 pv g1f3 g8f6 g1f3 g7g6 b1c3
info depth 6 seldepth 16 score cp 0 hashfull 0 nodes 45064 time 105 nps 1024181 pv g1f3 g7g6 e4e5 g8f6 d1g4 h6g5
info depth 7 seldepth 20 score cp 46 hashfull 0 nodes 223199 time 312 nps 1132989 pv g1f3 g7g6 b1c3 g8f6 g4g5 b8c6 d1d4
info depth 8 seldepth 22 score cp 0 hashfull 0 nodes 710749 time 1020 nps 1022660 pv g1f3 g7g6 b1c3 g8f6 b4b5 b8c6 b1c3 f6d5
info depth 9 seldepth 27 score cp 56 hashfull 0 nodes 3583137 time 4191 nps 1135701 pv g1f3 g7g6 f3g5 g8f6 e4e5 b8c6 a3b4 f6g4 c1d2
info depth 10 seldepth 28 score cp 0 hashfull 23 nodes 21373348 time 23008 nps 1137001 pv g1f3 g7g6 d2d4 g8f6 g4g5 b8c6 b1d2 d7d6 e1f2 d6e5
bestmove g1f3

simd=true
go depth 10
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 7 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 16 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 25 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 2152 time 36 nps 2152000 pv g1f3 g8f6 b1c3 g7g6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 15575 time 59 nps 1557500 pv g1f3 g8f6 b1c3 g7g6 b1c3
info depth 6 seldepth 16 score cp 0 hashfull 0 nodes 45034 time 114 nps 1072238 pv g1f3 g7g6 e4e5 g8f6 d1g4 b8c6
info depth 7 seldepth 20 score cp 46 hashfull 0 nodes 228084 time 313 nps 1239586 pv g1f3 g7g6 h1g1 g8f6 g4g5 b8c6 b5c6
info depth 8 seldepth 22 score cp 0 hashfull 0 nodes 742486 time 1010 nps 1088689 pv g1f3 g7g6 b1c3 g8f6 b4b5 b8c6 b1c3 f6d5
info depth 9 seldepth 27 score cp 56 hashfull 0 nodes 3660367 time 4035 nps 1216472 pv g1f3 g7g6 f3g5 g8f6 e4e5 b8c6 a3b4 d7d6 c1d2
info depth 10 seldepth 29 score cp 0 hashfull 23 nodes 21758283 time 22730 nps 1164852 pv g1f3 g7g6 d2d4 g8f6 g4g5 b8c6 b1d2 d7d6 e1f2 d6e5
bestmove g1f3

pigeon-cuda:

cuda=false
simd=false
go depth 10
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 14 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 23 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 2138 time 34 nps 1069000 pv g1f3 g7g6 g1f3 g8f6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 16079 time 60 nps 1236846 pv g1f3 g8f6 g1f3 g7g6 b1c3
info depth 6 seldepth 16 score cp 0 hashfull 0 nodes 45064 time 116 nps 1024181 pv g1f3 g7g6 e4e5 g8f6 d1g4 h6g5
info depth 7 seldepth 20 score cp 46 hashfull 0 nodes 223199 time 335 nps 1088775 pv g1f3 g7g6 b1c3 g8f6 g4g5 b8c6 d1d4
info depth 8 seldepth 22 score cp 0 hashfull 0 nodes 710749 time 1061 nps 999646 pv g1f3 g7g6 b1c3 g8f6 b4b5 b8c6 b1c3 f6d5
info depth 9 seldepth 27 score cp 56 hashfull 0 nodes 3583137 time 4133 nps 1172108 pv g1f3 g7g6 f3g5 g8f6 e4e5 b8c6 a3b4 f6g4 c1d2
info depth 10 seldepth 28 score cp 0 hashfull 23 nodes 21373348 time 23145 nps 1125149 pv g1f3 g7g6 d2d4 g8f6 g4g5 b8c6 b1d2 d7d6 e1f2 d6e5
bestmove g1f3

[sse4]
cuda=false
simd=true
go depth 10
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 12 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 19 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 2152 time 29 nps 2152000 pv g1f3 g8f6 b1c3 g7g6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 15575 time 49 nps 1557500 pv g1f3 g8f6 b1c3 g7g6 b1c3
info depth 6 seldepth 16 score cp 0 hashfull 0 nodes 45034 time 106 nps 1000755 pv g1f3 g7g6 e4e5 g8f6 d1g4 b8c6
info depth 7 seldepth 20 score cp 46 hashfull 0 nodes 228084 time 310 nps 1194157 pv g1f3 g7g6 h1g1 g8f6 g4g5 b8c6 b5c6
info depth 8 seldepth 22 score cp 0 hashfull 0 nodes 742486 time 1014 nps 1076066 pv g1f3 g7g6 b1c3 g8f6 b4b5 b8c6 b1c3 f6d5
info depth 9 seldepth 27 score cp 56 hashfull 0 nodes 3660367 time 4063 nps 1206847 pv g1f3 g7g6 f3g5 g8f6 e4e5 b8c6 a3b4 d7d6 c1d2
info depth 10 seldepth 29 score cp 0 hashfull 23 nodes 21758283 time 22592 nps 1175361 pv g1f3 g7g6 d2d4 g8f6 g4g5 b8c6 b1d2 d7d6 e1f2 d6e5
bestmove g1f3

cuda=false
simd=true
cpu sse2
info string instruction set override to SSE2
go depth 10
info depth 1 seldepth 1 score cp 84 hashfull 0 nodes 21 time 4 nps 21000 pv g1f3
info depth 2 seldepth 4 score cp 0 hashfull 0 nodes 94 time 14 nps 94000 pv g1f3 g8f6
info depth 3 seldepth 4 score cp 84 hashfull 0 nodes 696 time 23 nps 696000 pv g1f3 g8f6 g1f3
info depth 4 seldepth 8 score cp 0 hashfull 0 nodes 2152 time 35 nps 1076000 pv g1f3 g8f6 b1c3 g7g6
info depth 5 seldepth 14 score cp 57 hashfull 0 nodes 15575 time 57 nps 1415909 pv g1f3 g8f6 b1c3 g7g6 b1c3
info depth 6 seldepth 16 score cp 0 hashfull 0 nodes 45034 time 116 nps 958170 pv g1f3 g7g6 e4e5 g8f6 d1g4 b8c6
info depth 7 seldepth 20 score cp 46 hashfull 0 nodes 228084 time 334 nps 1112604 pv g1f3 g7g6 h1g1 g8f6 g4g5 b8c6 b5c6
info depth 8 seldepth 22 score cp 0 hashfull 0 nodes 742486 time 1106 nps 979532 pv g1f3 g7g6 b1c3 g8f6 b4b5 b8c6 b1c3 f6d5
info depth 9 seldepth 27 score cp 56 hashfull 0 nodes 3660367 time 4443 nps 1102188 pv g1f3 g7g6 f3g5 g8f6 e4e5 b8c6 a3b4 d7d6 c1d2
info depth 10 seldepth 29 score cp 0 hashfull 23 nodes 21758283 time 24740 nps 1072840 pv g1f3 g7g6 d2d4 g8f6 g4g5 b8c6 b1d2 d7d6 e1f2 d6e5
bestmove g1f3



class str_t : public std::string
{
public:
    enum
    {
        NPOS = std::string::npos
    };

    std::vector< str_t > split( const str_t& sep ) const
    {
        std::vector< str_t > result;

        const char* str = this->c_str();
        for( ;; )
        {
            const char* next = strstr( str, sep );
            if( !next )
                break;

            result.emplace_back( str, next );
            str = next + seplen;
        }

        result.emplace_back( str );
        return( result );
    }

    static str_t join( const std::vector< str_t >& parts, const str_t& glue )
    {
        size_t len = 0;

        for( const str_t& str : parts )
            len += str.length();

        if( parts.size() > 0 )
            len += glue.length() * (parts.size() - 1);

        std::string result( len );

        for( const str_t& str : parts )
        {
            if( result.length() > 0 )
                result.append( glue )

            result.append( str );
        }

        assert( result.length() == len );
        return( result );
    }

    str_t replace( const str_t& before, const str_t& after )
    {
        str_t result;
        result.reserve( this->length() );

        size_t pos = 0;

        for( ;; )
        {
            size_t ofs = this->find_first_of( before, pos );
            if( ofs == NPOS )
                break;

            result.append( this->substr( pos, pos + ofs ) );
            pos += ofs;
            pos += before.length();

            result.append( after );
        }

        result.append( this->substr( pos ) );
        return( result );
    }




};


void Foo()
{
	
}



template<> INLINE simd2_neon    CountBits<       DISABLE_POPCNT, simd2_neon >( const simd2_neon& val )                              { return( SoftCountBits64( val.vec ) ); }
template<> INLINE simd2_neon    CountBits<       ENABLE_POPCNT,  simd2_neon >( const simd2_neon& val )                              { return( neon_popcnt( val.vec ) ); }
template<> INLINE simd2_neon    MaskAllClear<    simd2_neon >()                                                                     { return( neon_zero() ); } 
template<> INLINE simd2_neon    MaskAllSet<      simd2_neon >()                                                                     { return( vmovq_n_u8( 0xFF ) ); } 
template<> INLINE simd2_neon    ByteSwap<        simd2_neon >( const simd2_neon& val )                                              { return( vrev64q_u8( val.vec ) ); }
template<> INLINE simd2_neon    MulSigned32<     simd2_neon >( const simd2_neon& val,  i32 scale )                                  { return( _mm_mul_epi32( val.vec, _mm_set1_epi64x( scale ) ) ); }
template<> INLINE simd2_neon    MaskOut<         simd2_neon >( const simd2_neon& val,  const simd2_neon& bitsToClear )              { return( vbicq_u64( val,vec, bitsToClear.vec ) ); }
template<> INLINE simd2_neon    CmpEqual<        simd2_neon >( const simd2_neon& a,    const simd2_neon& b )                        { return( neon_cmp64( a.vec, b.vec ) ); }
template<> INLINE simd2_neon    SelectIfZero<    simd2_neon >( const simd2_neon& val,  const simd2_neon& a )                        { return( vandq_u64( a.vec, neon_cmp64( val.vec, neon_zero() ) ) ); }
template<> INLINE simd2_neon    SelectIfZero<    simd2_neon >( const simd2_neon& val,  const simd2_neon& a, const simd2_neon& b )   { return( neon_select( b.vec, a.vec, neon_cmp64( val.vec, neon_zero() ) ) ); }
template<> INLINE simd2_neon    SelectIfNotZero< simd2_neon >( const simd2_neon& val,  const simd2_neon& a )                        { return( vandq_u64( vmvnq_u64( neon_cmp64( val.vec, neon_zero() ) ), a.vec ) ); }
template<> INLINE simd2_neon    SelectIfNotZero< simd2_neon >( const simd2_neon& val,  const simd2_neon& a, const simd2_neon& b )   { return( neon_select( a.vec, b.vec, neon_cmp64( val.vec, neon_zero() ) ) ); }
template<> INLINE simd2_neon    SelectWithMask<  simd2_neon >( const simd2_neon& mask, const simd2_neon& a, const simd2_neon& b )   { return( neon_select( b.vec, a.vec, mask.vec ) ); }
